sample_problem_statement = '''# [NOIP2011 提高组] 铺地毯

## 题目描述

为了准备一个独特的颁奖典礼，组织者在会场的一片矩形区域（可看做是平面直角坐标系的第一象限）铺上一些矩形地毯。一共有 $n$ 张地毯，编号从 $1$ 到 $n$。现在将这些地毯按照编号从小到大的顺序平行于坐标轴先后铺设，后铺的地毯覆盖在前面已经铺好的地毯之上。

地毯铺设完成后，组织者想知道覆盖地面某个点的最上面的那张地毯的编号。注意：在矩形地毯边界和四个顶点上的点也算被地毯覆盖。

## 输入格式

输入共 $n + 2$ 行。

第一行，一个整数 $n$，表示总共有 $n$ 张地毯。

接下来的 $n$ 行中，第 $i+1$ 行表示编号 $i$ 的地毯的信息，包含四个整数 $a ,b ,g ,k$，每两个整数之间用一个空格隔开，分别表示铺设地毯的左下角的坐标 $(a, b)$ 以及地毯在 $x$ 轴和 $y$ 轴方向的长度。

第 $n + 2$ 行包含两个整数 $x$ 和 $y$，表示所求的地面的点的坐标 $(x, y)$。

## 输出格式

输出共 $1$ 行，一个整数，表示所求的地毯的编号；若此处没有被地毯覆盖则输出 `-1`。

## 样例 #1

### 样例输入 #1

```
3
1 0 2 3
0 2 3 3
2 1 3 3
2 2
```

### 样例输出 #1

```
3
```

## 样例 #2

### 样例输入 #2

```
3
1 0 2 3
0 2 3 3
2 1 3 3
4 5
```

### 样例输出 #2

```
-1
```

## 提示

【样例解释 1】

如下图，$1$ 号地毯用实线表示，$2$ 号地毯用虚线表示，$3$ 号用双实线表示，覆盖点 $(2,2)$ 的最上面一张地毯是 $3$ 号地毯。

![](https://cdn.luogu.com.cn/upload/image_hosting/q4izfzpb.png)

【数据范围】

对于 $30\%$ 的数据，有 $n \le 2$。  
对于 $50\%$ 的数据，$0 \le a, b, g, k \le 100$。  
对于 $100\%$ 的数据，有 $0 \le n \le 10^4$, $0 \le a, b, g, k \le {10}^5$。   

noip2011 提高组 day1 第 $1$ 题。'''

sample_output = '''
=====================

### 方案 1：最大输入规模（`n = 10^4`）
- **描述**：测试程序在大规模输入下的性能。
- **构造方法**：
  - 输入 `n = 10^4`。
  - 每张地毯的左下角坐标 `(a, b)` 随机生成，范围为 `[0, 10^5]`。
  - 每张地毯的尺寸 `(g, k)` 随机生成，范围为 `[1, 10^5]`。
  - 查询点 `(x, y)` 随机生成，范围为 `[0, 10^5]`。
- **示例**：
  ```
  10000
  0 0 100000 100000
  50000 50000 50000 50000
  ...
  99999 99999 1 1
  50000 50000
  ```

=====================

### 方案 2：地毯尺寸最大（`g = 10^5` 或 `k = 10^5`）
- **描述**：测试程序在地毯尺寸达到最大值的情况下是否正确处理。
- **构造方法**：
  - 输入 `n = 10^4`。
  - 第一张地毯的尺寸 `(g, k)` 为 `(10^5, 10^5)`，左下角坐标为 `(0, 0)`。
  - 第二张地毯的尺寸 `(g, k)` 为 `(10^5, 10^5)`，左下角坐标为 `(10^5, 10^5)`。
  - 查询点 `(x, y)` 为 `(50000, 50000)`。
- **示例**：
  ```
  10000
  0 0 100000 100000
  ...
  100000 100000 100000 100000
  50000 50000
  ```

=====================

### 方案 3：查询点位于地毯边界
- **描述**：测试程序在查询点位于地毯边界的情况下是否正确处理。
- **构造方法**：
  - 输入 `n = 10^4`。
  - 第一张地毯的左下角坐标为 `(0, 0)`，尺寸为 `(10, 10)`。
  - 第二张地毯的左下角坐标为 `(5, 5)`，尺寸为 `(10, 10)`。
  - 查询点 `(x, y)` 为 `(5, 5)`（位于第二张地毯的左下角）。
- **示例**：
  ```
  10000
  0 0 10 10
  ...
  5 5 10 10
  5 5
  ```

=====================

### 方案 4：查询点未被任何地毯覆盖
- **描述**：测试程序在查询点未被任何地毯覆盖的情况下是否正确返回 `-1`。
- **构造方法**：
  - 输入 `n = 10^4`。
  - 第一张地毯的左下角坐标为 `(0, 0)`，尺寸为 `(10, 10)`。
  - 第二张地毯的左下角坐标为 `(20, 20)`，尺寸为 `(10, 10)`。
  - 查询点 `(x, y)` 为 `(15, 15)`。
- **示例**：
  ```
  10000
  0 0 10 10
  ...
  20 20 10 10
  15 15
  ```

=====================

### 方案 5：查询点被多张地毯覆盖
- **描述**：测试程序在查询点被多张地毯覆盖的情况下是否正确返回最上面的地毯编号。
- **构造方法**：
  - 输入 `n = 10^4`。
  - 第一张地毯的左下角坐标为 `(0, 0)`，尺寸为 `(10, 10)`。
  - 第二张地毯的左下角坐标为 `(5, 5)`，尺寸为 `(10, 10)`。
  - 第三张地毯的左下角坐标为 `(7, 7)`，尺寸为 `(10, 10)`。
  - 查询点 `(x, y)` 为 `(8, 8)`。
- **示例**：
  ```
  10000
  0 0 10 10
  5 5 10 10
  7 7 10 10
  ...
  8 8
  ```

=====================

### 方案 6：地毯完全重叠
- **描述**：测试程序在多张地毯完全重叠的情况下是否正确处理覆盖顺序。
- **构造方法**：
  - 输入 `n = 10^4`。
  - 每张地毯的左下角坐标为 `(0, 0)`，尺寸为 `(10, 10)`。
  - 查询点 `(x, y)` 为 `(5, 5)`。
- **示例**：
  ```
  3
  0 0 10 10
  0 0 10 10
  0 0 10 10
  ...
  5 5
  ```

=====================

### 方案 7：地毯覆盖整个查询区域
- **描述**：测试程序在某张地毯覆盖整个查询区域的情况下是否正确处理。
- **构造方法**：
  - 输入 `n = 1`。
  - 地毯的左下角坐标为 `(0, 0)`，尺寸为 `(10^5, 10^5)`。
  - 查询点 `(x, y)` 为 `(50000, 50000)`。
- **示例**：
  ```
  1
  0 0 100000 100000
  50000 50000
  ```

=====================

### 方案 8：随机生成的地毯和查询点
- **描述**：测试程序在随机生成的地毯和查询点的情况下是否正确处理。
- **构造方法**：
  - 输入 `n = 1000`。
  - 每张地毯的左下角坐标 `(a, b)` 随机生成，范围为 `[0, 10^5]`。
  - 每张地毯的尺寸 `(g, k)` 随机生成，范围为 `[1, 10^5]`。
  - 查询点 `(x, y)` 随机生成，范围为 `[0, 10^5]`。
- **示例**：
  ```
  1000
  12345 67890 10000 20000
  54321 98765 30000 40000
  ...
  11111 22222 50000 60000
  33333 44444
  ```

=====================

### 方案 9：地毯覆盖查询点的边缘
- **描述**：测试程序在查询点位于某张地毯边缘的情况下是否正确处理。
- **构造方法**：
  - 输入 `n = 2`。
  - 第一张地毯的左下角坐标为 `(0, 0)`，尺寸为 `(10, 10)`。
  - 第二张地毯的左下角坐标为 `(5, 5)`，尺寸为 `(10, 10)`。
  - 查询点 `(x, y)` 为 `(5, 5)`（位于第二张地毯的左下角）。
- **示例**：
  ```
  2
  0 0 10 10
  5 5 10 10
  5 5
  ```

=====================

### 方案 10：地毯不重叠
- **描述**：测试程序在多张地毯完全不重叠的情况下是否正确处理。
- **构造方法**：
  - 输入 `n = 3`。
  - 第一张地毯的左下角坐标为 `(0, 0)`，尺寸为 `(10, 10)`。
  - 第二张地毯的左下角坐标为 `(20, 20)`，尺寸为 `(10, 10)`。
  - 第三张地毯的左下角坐标为 `(40, 40)`，尺寸为 `(10, 10)`。
  - 查询点 `(x, y)` 为 `(5, 5)`。
- **示例**：
  ```
  3
  0 0 10 10
  20 20 10 10
  40 40 10 10
  5 5
  ```

=====================

### 方案 11：地毯覆盖顺序测试
- **描述**：测试程序在地毯铺设顺序正确的情况下是否正确处理。
- **构造方法**：
  - 输入 `n = 3`。
  - 第一张地毯的左下角坐标为 `(0, 0)`，尺寸为 `(10, 10)`。
  - 第二张地毯的左下角坐标为 `(5, 5)`，尺寸为 `(10, 10)`。
  - 第三张地毯的左下角坐标为 `(7, 7)`，尺寸为 `(10, 10)`。
  - 查询点 `(x, y)` 为 `(8, 8)`。
- **示例**：
  ```
  3
  0 0 10 10
  5 5 10 10
  7 7 10 10
  8 8
  ```

=====================
'''